sphinx-build -b html -d _build/doctrees   . /Users/andy/src/roadrunner_doc/pydoc/
Running Sphinx v1.2b2
loading pickled environment... not yet created
building [html]: targets for 6 source files that are out of date
updating environment: 6 added, 0 changed, 0 removed
reading sources... [ 16%] api_reference

.. py:module:: roadrunner

The RoadRunner SBML Simulation Engine,
(c) 2009-2013 Herbert Sauro, Andy Somogyi and Totte Karlsson


.. py:class:: ExecutableModel(*args, **kwargs)
   :module: roadrunner

   The sbml model.
   
   
   
   .. py:method:: ExecutableModel.evalInitialConditions()
      :module: roadrunner
   
              
      
   
   .. py:method:: ExecutableModel.getBoundarySpeciesAmounts(*args)
      :module: roadrunner
   
      :param numpy.ndarray index: (optional) an index array indicating which items to return.
      :returns: an array of the boundary species amounts.
      :rtype: numpy.ndarray.
      
      
   
   .. py:method:: ExecutableModel.getBoundarySpeciesConcentrations(*args)
      :module: roadrunner
   
      :param numpy.ndarray index: (optional) an index array indicating which items to return.
      :returns: an array of the boundary species concentrations. 
      :rtype: numpy.ndarray.
      
      
   
   .. py:method:: ExecutableModel.getBoundarySpeciesIds()
      :module: roadrunner
   
      :param numpy.ndarray index: (optional) an index array indicating which items to return.
      :returns: a list of boundary species ids.
      
      
   
   .. py:method:: ExecutableModel.getCompartmentIds()
      :module: roadrunner
   
      :param numpy.ndarray index: (optional) an index array indicating which items to return.
      :retuns: a list of compartment ids.
      
      
   
   .. py:method:: ExecutableModel.getCompartmentVolumes(*args)
      :module: roadrunner
   
      :param numpy.ndarray index: (optional) an index array indicating which items to return.
      :returns: an array of compartment volumes.
      :rtype: numpy.ndarray.
      
      
   
   .. py:method:: ExecutableModel.getConservedSumChanged()
      :module: roadrunner
   
              
      
   
   .. py:method:: ExecutableModel.getConservedSums(*args)
      :module: roadrunner
   
      :param numpy.ndarray index: (optional) an index array indicating which items to return.
      :returns: an array of conserved sums.
      :rtype: numpy.ndarray.
      
      
   
   .. py:method:: ExecutableModel.getFloatingSpeciesAmountRates(*args)
      :module: roadrunner
   
      :param numpy.ndarray index: (optional) an index array indicating which items to return.
      :returns: an array of the rates of change of the floating species amounts.
      :rtype: numpy.ndarray
      
      
   
   .. py:method:: ExecutableModel.getFloatingSpeciesAmounts(*args)
      :module: roadrunner
   
      Get the list of floating species amounts. If no arguments are given, this
      returns all floating species amounts.
      
      :param index: an optional array of desired floating species indices. i.e. if this model has
              4 floating species and we want the amounts for the last and first, we
              would use [3,0] for the index array.
      :type name: numpy.ndarray
      
      get all the amounts:
      
      >>> e.getFloatingSpeciesAmounts()
      [15,2,3,20]
      
      get amounts 3 and 0:
      
      >>> getFloatingSpeciesAmounts([3,0])
      [10,15]
      
      
      
   
   .. py:method:: ExecutableModel.getFloatingSpeciesConcentrations(*args)
      :module: roadrunner
   
      :param numpy.ndarray index: (optional) an index array indicating which items to return.
      :returns: an array of floating species concentrations.
      :rtype: numpy.ndarray
      
      
   
   .. py:method:: ExecutableModel.getGlobalParameterValues(*args)
      :module: roadrunner
   
      :param numpy.ndarray index: (optional) an index array indicating which items to return.
      :returns: an array of global parameter values.
      :rtype: numpy.ndarray.
      
      
   
   .. py:method:: ExecutableModel.getInfo()
      :module: roadrunner
   
              
      
   
   .. py:method:: ExecutableModel.getModelName()
      :module: roadrunner
   
      Get the model name specified in the sbml
      
      
   
   .. py:method:: ExecutableModel.getNumBoundarySpecies()
      :module: roadrunner
   
              
      
   
   .. py:method:: ExecutableModel.getNumCompartments()
      :module: roadrunner
   
              
      
   
   .. py:method:: ExecutableModel.getNumConservedSums()
      :module: roadrunner
   
              
      
   
   .. py:method:: ExecutableModel.getNumDependentSpecies()
      :module: roadrunner
   
              
      
   
   .. py:method:: ExecutableModel.getNumFloatingSpecies()
      :module: roadrunner
   
              
      
   
   .. py:method:: ExecutableModel.getNumGlobalParameters()
      :module: roadrunner
   
              
      
   
   .. py:method:: ExecutableModel.getNumIndependentSpecies()
      :module: roadrunner
   
              
      
   
   .. py:method:: ExecutableModel.getNumReactions()
      :module: roadrunner
   
              
      
   
   .. py:method:: ExecutableModel.getNumRules()
      :module: roadrunner
   
              
      
   
   .. py:method:: ExecutableModel.getReactionIds()
      :module: roadrunner
   
      :param numpy.ndarray index: (optional) an index array indicating which items to return.
      :returns: a list of reaction ids.
      
      
   
   .. py:method:: ExecutableModel.getReactionRates(*args)
      :module: roadrunner
   
      :param numpy.ndarray index: (optional) an index array indicating which items to return.
      :returns: an array of reaction rates.
      :rtype: numpy.ndarray
      
      
   
   .. py:method:: ExecutableModel.getTime()
      :module: roadrunner
   
              
      
   
   .. py:method:: ExecutableModel.reset()
      :module: roadrunner
   
              
      
   
   .. py:method:: ExecutableModel.setBoundarySpeciesConcentrations(*args)
      :module: roadrunner
   
      :param numpy.ndarray index: (optional) an index array indicating which items to set, 
              or if no index array is given, the first param should be an array of all the 
              values to set.
      :param numpy.ndarray values' the values to set.
      
      
      
   
   .. py:method:: ExecutableModel.setCompartmentVolumes(*args)
      :module: roadrunner
   
      :param numpy.ndarray index: (optional) an index array indicating which items to set, 
              or if no index array is given, the first param should be an array of all the 
              values to set.
      :param numpy.ndarray values' the values to set.
      
      
      
   
   .. py:method:: ExecutableModel.setConservedSumChanged(*args)
      :module: roadrunner
   
              
      
   
   .. py:method:: ExecutableModel.setConservedSums(*args)
      :module: roadrunner
   
      :param numpy.ndarray index: (optional) an index array indicating which items to set, 
              or if no index array is given, the first param should be an array of all the 
              values to set.
      :param numpy.ndarray values' the values to set.
      
      
      
   
   .. py:method:: ExecutableModel.setFloatingSpeciesAmounts(*args)
      :module: roadrunner
   
      :param numpy.ndarray index: (optional) an index array indicating which items to set, 
              or if no index array is given, the first param should be an array of all the 
              values to set.
      :param numpy.ndarray values' the values to set.
      
      
   
   .. py:method:: ExecutableModel.setFloatingSpeciesConcentrations(*args)
      :module: roadrunner
   
      :param numpy.ndarray index: (optional) an index array indicating which items to set, 
              or if no index array is given, the first param should be an array of all the 
              values to set.
      :param numpy.ndarray values' the values to set.
      
      
   
   .. py:method:: ExecutableModel.setGlobalParameterValues(*args)
      :module: roadrunner
   
      :param numpy.ndarray index: (optional) an index array indicating which items to set, 
              or if no index array is given, the first param should be an array of all the 
              values to set.
      :param numpy.ndarray values' the values to set.
      
      
   
   .. py:method:: ExecutableModel.setTime(*args)
      :module: roadrunner
   
      Set the model time variable.
      
      :param time: time the time value to set.
      :returns: None
      
      

.. py:class:: RoadRunner(compiler='', tempDir='', supportCodeDir='')
   :module: roadrunner

   The main RoadRunner class.
   
   All three of the RoadRunner options default to the empty string, in this
   case, the default values are used.
   
    
   :param compiler: if LLVM build is enabled, the compiler defaults to LLVM.
   :type name: str (optional)
   
   :param tempDir: (string) typically ignored, only used by the old C RoadRunner.
   :type name: str (optional)
   
   :param supportCodeDir: typically ignored, only used by the old C RoadRunner
   :type name: str (optional)
   
   
   .. py:method:: RoadRunner.computeSteadyStateValue(*args)
      :module: roadrunner
   
              
      
   
   .. py:method:: RoadRunner.getCC(variable, parameter)
      :module: roadrunner
   
      Get scaled a single control coefficient with respect to a global parameter.
      
      :param variable: The id of a dependent variable of the coefficient, for example a 
      flux or species concentration.
      :type name: str
      :param parameter: The id of the independent parameter, for example a kinetic constant 
      or boundary species
      :returns: the value of the control coefficeint returned to the caller.
      :rtype: double
      
      
   
   .. py:method:: RoadRunner.getCompiler()
      :module: roadrunner
   
      get the compiler used to build the ExecutableModel.
      
      
   
   .. py:method:: RoadRunner.getConfigurationXML()
      :module: roadrunner
   
      recurse through all of the child configurable objects that this
      class ownes and build an assemble all of thier configuration parameters
      into a single xml document which is returned as a string.
      
      The value of this result depends on what child objects are presently loaded.
      
      
   
   .. py:method:: RoadRunner.getConservationAnalysis()
      :module: roadrunner
   
      is conservation analysis enabled. This is set
      
      
   
   .. py:method:: RoadRunner.getConservationMatrix()
      :module: roadrunner
   
      TODO docs
      
      
   
   .. py:staticmethod:: RoadRunner.getCopyright()
      :module: roadrunner
   
      get the copyright string
      
      
   
   .. py:method:: RoadRunner.getEE(*args)
      :module: roadrunner
   
      Retireve a single elasticity coefficient.
      
      :param str variable: The dependent variable of the coefficient, for example a flux or 
              species concentration.
      :param str parameter: The independent parameter, for example a kinetic constant or boundary species
      
      
      
   
   .. py:method:: RoadRunner.getEigenvalueIds()
      :module: roadrunner
   
      returns a list of floating species ids with thier names
      prefixed with 'eigen_'. For example, if the model contained
      the floating species 'S1' and 'S2', this would return a list
      containing ['eigen_S1', 'eigen_S2'].
      
      
   
   .. py:method:: RoadRunner.getEigenvalues()
      :module: roadrunner
   
      Returns eigenvalues, first column real part, second column imaginary part
      
      :rtype: numpy.ndarray
      
      
   
   .. py:staticmethod:: RoadRunner.getExtendedVersionInfo()
      :module: roadrunner
   
      getVersion plus info about dependent libs versions.
      
      
   
   .. py:method:: RoadRunner.getFloatingSpeciesAmountIds()
      :module: roadrunner
   
      gets a list of the floating species ids, but with the ids surrounded
      by square brackets, i.e. 'S1' -> '[S1]'
      
      
   
   .. py:method:: RoadRunner.getFullJacobian()
      :module: roadrunner
   
      compute the full Jacobian at the current operating point. 
      
      This is the Jacobian of ONLY the floating species.
      
      
   
   .. py:method:: RoadRunner.getFullyReorderedStoichiometryMatrix()
      :module: roadrunner
   
      Returns the stoichiometry matrix for the currently loaded model
      
      
   
   .. py:method:: RoadRunner.getInfo()
      :module: roadrunner
   
      return info about the current state of the object
      
      :rtype: str
      
      
   
   .. py:method:: RoadRunner.getInstanceCount()
      :module: roadrunner
   
      Number of currently running RoadRunner instances.
      
      
   
   .. py:method:: RoadRunner.getInstanceID()
      :module: roadrunner
   
      When there are multiple instances of RoadRunner, this is the instance id.
      
      
   
   .. py:method:: RoadRunner.getIntegrator()
      :module: roadrunner
   
      get the integrator which is currently being used to
      time evolve the system.
      
      
   
   .. py:method:: RoadRunner.getL0Matrix()
      :module: roadrunner
   
      TODO docs
      
      :rtype: numpy.ndarray
      
      
   
   .. py:method:: RoadRunner.getLinkMatrix()
      :module: roadrunner
   
      TODO docs
      
      :rtype: numpy.ndarray
      
      
   
   .. py:method:: RoadRunner.getModelGenerator()
      :module: roadrunner
   
      TODO docs
      
      :rtype: numpy.ndarray
      
      
   
   .. py:method:: RoadRunner.getNrMatrix()
      :module: roadrunner
   
      TODO docs
      
      :rtype: numpy.ndarray
      
      
   
   .. py:staticmethod:: RoadRunner.getParamPromotedSBML(*args)
      :module: roadrunner
   
      Takes an sbml document (in textual form) and changes all of the local parameters
      to be global parameters.
      
      :param str sbml: the contents of an sbml document
      :rtype: str
      
      
   
   .. py:method:: RoadRunner.getReducedJacobian()
      :module: roadrunner
   
      get the *reduced* Jacobian for the independent species. 
      
      :rtype: numpy.ndarray
      
      
   
   .. py:method:: RoadRunner.getReorderedStoichiometryMatrix()
      :module: roadrunner
   
      TODO docs
      
      :rtype: numpy.ndarray
      
      
   
   .. py:method:: RoadRunner.getSBML()
      :module: roadrunner
   
      return the currently loaded sbml document as a string.
      
      :rtype: str
      
      
   
   .. py:method:: RoadRunner.getScaledConcentrationControlCoefficientMatrix()
      :module: roadrunner
   
      TODO docs
      
      :rtype: numpy.ndarray
      
      
   
   .. py:method:: RoadRunner.getScaledFloatingSpeciesElasticity(*args)
      :module: roadrunner
   
      Compute the scaled elasticity for a given reaction and given species. 
      
      :param str reactionId: the sbml id of a reaction.
      :param str speciesId: the sbml id of a species.
      :rtype: double
      
      
   
   .. py:method:: RoadRunner.getScaledFluxControlCoefficientMatrix()
      :module: roadrunner
   
      Calculate the the matrix of scaled flux control coefficients. The first column 
      will contain real values and the second column the imaginary values.
      
      :rtype: numpy.ndarray
      
      
   
   .. py:method:: RoadRunner.getScaledReorderedElasticityMatrix()
      :module: roadrunner
   
      Compute the unscaled elasticity matrix at the current operating point
      
      :rtype: numpy.ndarray
      
      
   
   .. py:method:: RoadRunner.getSelectedValues()
      :module: roadrunner
   
      returns the values selected with SimulateOptions for the current model time / timestep
      
      :rtype: numpy.ndarray
      
      
   
   .. py:method:: RoadRunner.getSimulationResult()
      :module: roadrunner
   
      get the simulation result in case one forgot to hold on to the simulate return value.
      
      :rtype: numpy.ndarray
      
      
   
   .. py:method:: RoadRunner.getSteadyStateSelectionList()
      :module: roadrunner
   
              
      
   
   .. py:method:: RoadRunner.getStoichiometryMatrix()
      :module: roadrunner
   
      TODO docs
      
      
   
   .. py:method:: RoadRunner.getTimeCourseSelectionList()
      :module: roadrunner
   
      TODO docs
      
      
   
   .. py:method:: RoadRunner.getUnscaledConcentrationControlCoefficientMatrix()
      :module: roadrunner
   
      TODO docs
      
      
   
   .. py:method:: RoadRunner.getUnscaledElasticityMatrix()
      :module: roadrunner
   
      TODO docs
      
      
   
   .. py:method:: RoadRunner.getUnscaledFluxControlCoefficientMatrix()
      :module: roadrunner
   
      TODO docs
      
      
   
   .. py:method:: RoadRunner.getUnscaledSpeciesElasticity(*args)
      :module: roadrunner
   
      Get a single species elasticity value
      IMPORTANT:
      Assumes that the reaction rates have been precomputed at the operating point !!
      
      :param int reactionIndx: index of reactionl
      :param int speciesIndx: index of species.
      
      
   
   .. py:staticmethod:: RoadRunner.getVersion()
      :module: roadrunner
   
      TODO docs
      
      
   
   .. py:staticmethod:: RoadRunner.getlibSBMLVersion()
      :module: roadrunner
   
      TODO docs
      
      
   
   .. py:method:: RoadRunner.isModelLoaded()
      :module: roadrunner
   
      TODO docs
      
      
   
   .. py:method:: RoadRunner.loadSBML(*args)
      :module: roadrunner
   
      TODO docs
      
      
   
   .. py:method:: RoadRunner.loadSBMLFromFile(*args)
      :module: roadrunner
   
      Load an sbml document from disk.
      
      :param str path: path of an sbml document.
      :returns: True if successfull, False if failed.
      
      
   
   .. py:attribute:: RoadRunner.model
      :module: roadrunner
      :annotation: None
   
      TODO docs
      
   
   .. py:method:: RoadRunner.oneStep(*args)
      :module: roadrunner
   
      TODO docs
      
      
   
   .. py:method:: RoadRunner.reset()
      :module: roadrunner
   
      TODO docs
      
      
   
   .. py:method:: RoadRunner.setConfigurationXML(*args)
      :module: roadrunner
   
      given a xml document, which should have been returned from getConfigurationXML,
      this method recurses though all the child configurable elements and sets thier
      configuration to the values specified in the document.
      
      :param str xml: the contents of an xml document.
      
      
   
   .. py:method:: RoadRunner.setConservationAnalysis(*args)
      :module: roadrunner
   
      TODO docs
      
      
   
   .. py:method:: RoadRunner.setSteadyStateSelectionList(*args)
      :module: roadrunner
   
      :param list(str) selectionList: a list of selection identifiers.
      
      
   
   .. py:method:: RoadRunner.setTimeCourseSelectionList(*args)
      :module: roadrunner
   
      :param list(str) selectionList: a list of selection identifiers.
      
      
   
   .. py:method:: RoadRunner.simulate(*args)
      :module: roadrunner
   
      simulate the current SBML model.
      
      There are a number of ways to call simulate. 
      
      1. With no arguments. In this case, the current set of `SimulateOptions` will
      be used for the simulation. The current set may be changed either directly 
      via setSimulateOptions() or with one of the two alternate ways of calling 
      simulate. 
      
      2: With single `SimulateOptions` argument. In this case, all of the settings 
      in the given options are copied and will be used for the current and future
      simulations. 
      
      3: With the three positions arguments, `timeStart`, `timeEnd`, `steps`. In this case
      these three values are copied and will be used for the current and future simulations.
      
      The options given in the 2nd and 3rd forms will remain in effect until changed. So, if
      one calls::
      
          r.simulate(0, 3.14, 100)
      
      The start time of 0, end time of 3.14 and steps of 100 will remain in effect, so that if this
      is followed by a call to::
      
          r.simulate()
      
      This simulation will use the previous values. 
      
      :returns: a numpy array with each selected output timeseries being a
                column vector, and the 0'th column is the simulation time.
      :rtype: numpy.ndarray
      
   
   .. py:attribute:: RoadRunner.simulateOptions
      :module: roadrunner
      :annotation: None
   
      Get the SimulateOptions object where simulation options may be set. 
      
   
   .. py:method:: RoadRunner.steadyState()
      :module: roadrunner
   
      TODO docs
      
      

.. py:function:: RoadRunner_getCopyright()
   :module: roadrunner

   get the copyright string
   
   

.. py:function:: RoadRunner_getExtendedVersionInfo()
   :module: roadrunner

   getVersion plus info about dependent libs versions.
   
   

.. py:function:: RoadRunner_getParamPromotedSBML(*args)
   :module: roadrunner

   Takes an sbml document (in textual form) and changes all of the local parameters
   to be global parameters.
   
   :param str sbml: the contents of an sbml document
   :rtype: str
   
   

.. py:function:: RoadRunner_getVersion()
   :module: roadrunner

   TODO docs
   
   

.. py:function:: RoadRunner_getlibSBMLVersion()
   :module: roadrunner

   TODO docs
   
   

.. py:class:: SelectionRecord(*args)
   :module: roadrunner

   RoadRunner provides a range of flexible ways of selecting values from 
   a simulation. These values can not only be calculated directly via
   RoadRunner.getSelectionValue, but any of these selections can be
   used as columns in the simulate result matrix. 
   
   The SectionRecord.selectionType should be one of the constants listed
   here. 
   
   Most selection types only require the first symbol id, p1 to be set, 
   however certain ones such as [???] require both p1 and p2.
   
   
   
   .. py:attribute:: SelectionRecord.index
      :module: roadrunner
      :annotation: None
   
   
   .. py:attribute:: SelectionRecord.p1
      :module: roadrunner
      :annotation: None
   
   
   .. py:attribute:: SelectionRecord.p2
      :module: roadrunner
      :annotation: None
   
   
   .. py:attribute:: SelectionRecord.selectionType
      :module: roadrunner
      :annotation: None
   

.. py:class:: SimulateOptions(*args)
   :module: roadrunner

   RoadRunner simulation options.
   
   This is the full set of options that determines how RoadRunner performs
   a simulation of an sbml model.
   
   This is a superset of the values stored in a sbml test suite settings file, the
   documentation of the fields which correspond to an sbml test suite settings was
   taken from http://sbml.org
   
   This object can be read from a sbml test suite options file by using a file
   name in the constructor.
   
   :param sbmlSettingFilePath: (optional) if this is given, the settings are read 
   from this settings file, if not, the default values are set.
   
   
   
   .. py:attribute:: SimulateOptions.absolute
      :module: roadrunner
      :annotation: None
   
      :type name: list(str)
      
      A number representing the absolute difference permitted for the integrator
      tolerence.
      
   
   .. py:attribute:: SimulateOptions.amounts
      :module: roadrunner
      :annotation: None
   
      A list of the variable whose output in the results file is in amount
      (not concentration) units. This list of variables must be a subset of
      the names listed in variables.
      
   
   .. py:attribute:: SimulateOptions.concentrations
      :module: roadrunner
      :annotation: None
   
      A list of the variable whose output in the results file is in concentration
      (not amount) units. This list of variables must be a subset of the names
      listed in variables.
      
   
   .. py:attribute:: SimulateOptions.duration
      :module: roadrunner
      :annotation: None
   
      The duration of the simulation run, in the model's units of time. Note, 
      setting the duration automatically sets the end time and visa versa.
      
   
   .. py:attribute:: SimulateOptions.end
      :module: roadrunner
      :annotation: None
   
      The simulation end time. Note, setting the end time automatically sets the 
      duration accoringly and visa versa.
      
   
   .. py:attribute:: SimulateOptions.flags
      :module: roadrunner
      :annotation: None
   
      can be set to ResetModel so that the model is reset to its intial state
      when the simulation is run. 
      
   
   .. py:attribute:: SimulateOptions.relative
      :module: roadrunner
      :annotation: None
   
      A float-point number representing the relative difference permitted.
      Defaults 0.0001
      
   
   .. py:attribute:: SimulateOptions.resetModel
      :module: roadrunner
      :annotation: None
   
      Causes the model to be reset to the original conditions specified
      in the sbml when the simulation is run.
      
   
   .. py:attribute:: SimulateOptions.start
      :module: roadrunner
      :annotation: None
   
      The start time of the simulation time-series data.
      Often this is 0, but not necessarily.
      
   
   .. py:attribute:: SimulateOptions.steps
      :module: roadrunner
      :annotation: None
   
      The number of steps at which the output is sampled. The samples are evenly spaced.
      When a simulation system calculates the data points to record, it will typically
      divide the duration by the number of time steps. Thus, for X steps, the output
      will have X+1 data rows.
      
   
   .. py:attribute:: SimulateOptions.stiff
      :module: roadrunner
      :annotation: None
   
      Use the stiff integrator.
      
   
   .. py:attribute:: SimulateOptions.variables
      :module: roadrunner
      :annotation: None
   
      The variables (in addition to time) whose values will be saved in the result.
      These are SBML model id's. Order is significant, as this determines the order
      of the columns in the result matrix.
      
      Important: if a symbol in this list refers to a species in the model,
      then that symbol should also be listed in either the amount or concentration
      lists below. If a species symbol is listed in variables, but is not listed
      in either amounts or concentrations, then it defaults to an amount value. 
      
      The ordering of the symbols in variabls is what determines the output 
      ordering. The order of symbols in either amounts or concetrations do not
      effect the output ordering.
      
q      NOTE:If a listed variable has two underscores in it ('__'), that variable
      is actually present only in a submodel of the main model, from the
      Hierarchical Model Composition package, in the format submodelID__variableID.
      If the model is flattened, the variable will appear automatically.
      
reading sources... [ 33%] basics
reading sources... [ 50%] doc
reading sources... [ 66%] index
reading sources... [ 83%] introduction
reading sources... [100%] whatisroadrunner

looking for now-outdated files... none found
pickling environment... done
checking consistency... done
preparing documents... done
writing output... [ 16%] api_reference
writing output... [ 33%] basics
writing output... [ 50%] doc
writing output... [ 66%] index
writing output... [ 83%] introduction
writing output... [100%] whatisroadrunner

writing additional files... genindex py-modindex search
copying static files... done
copying extra files... dumping search index... done
dumping object inventory... done
build succeeded, 138 warnings.

Build finished. The HTML pages are in /Users/andy/src/roadrunner_doc/pydoc/.
